#include <stdio.h>
#include <math.h>
#include <stdlib.h>

#define pi 3.141592

float aleatorio();
float likelihood(float *y_obs, float *y_model);
float my_model(float x_obs,float m, float b);

int main()
{
  float *x_obs;
  x_obs = malloc(100000);
  float *y_obs;
  y_obs = malloc(100000);

  x_obs[0]=log(sqrt(pow(0.324190175,2) + pow(0.090955208,2) + pow(-0.022920510,2)));
  x_obs[1]=log(sqrt(pow(0.324190175,2) + pow(0.090955208,2) + pow(-0.022920510,2)));
  x_obs[2]=log(sqrt(pow(0.324190175,2) + pow(0.090955208,2) + pow(-0.022920510,2)));
  x_obs[3]=log(sqrt(pow(0.324190175,2) + pow(0.090955208,2) + pow(-0.022920510,2)));
  x_obs[4]=log(sqrt(pow(0.324190175,2) + pow(0.090955208,2) + pow(-0.022920510,2)));
  x_obs[5]=log(sqrt(pow(0.324190175,2) + pow(0.090955208,2) + pow(-0.022920510,2)));
  x_obs[6]=log(sqrt(pow(0.324190175,2) + pow(0.090955208,2) + pow(-0.022920510,2)));
  x_obs[0]=log(sqrt(pow(0.324190175,2) + pow(0.090955208,2) + pow(-0.022920510,2)));
  x_obs[0]=log(sqrt(pow(0.324190175,2) + pow(0.090955208,2) + pow(-0.022920510,2)));
  
  float *m_walk;
  m_walk = malloc(100000);
  float *b_walk;
  b_walk = malloc(100000);
  float *l_walk;
  l_walk = malloc(100000);
  return 0;
}

float aleatorio()
{
  float sigma = 0.1;
  float phi = drand48()*2*pi;
  float gamma=-log(drand48());
  float r = sigma*sqrt(2*gamma);
  float x = r*cos(phi);
  return x;
}

float likelihood(float *y_obs, float *y_model)
{
  float z = 0;
  int i;
  for(i=0;i<8;i++)
    {
      z+=0.5*pow((y_obs[i]-y_model[i]),2);
    }
  return exp(-z);
}

float my_model(float x_obs,float m,float b)
{
  return x_obs*m + b;
}



      
